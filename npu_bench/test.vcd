$date
	Tue May  9 20:17:12 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb_npu $end
$var wire 1 ! ack $end
$var reg 1 " clk $end
$var reg 1 # en $end
$var reg 1 $ rst $end
$scope module DUT_npu $end
$var wire 1 " clk $end
$var wire 1 # en $end
$var wire 32 % in1 [31:0] $end
$var wire 32 & in2 [31:0] $end
$var wire 1 $ rst $end
$var wire 32 ' c9 [31:0] $end
$var wire 32 ( c8 [31:0] $end
$var wire 32 ) c7 [31:0] $end
$var wire 32 * c6 [31:0] $end
$var wire 32 + c5 [31:0] $end
$var wire 32 , c4 [31:0] $end
$var wire 32 - c3 [31:0] $end
$var wire 32 . c2 [31:0] $end
$var wire 32 / c1 [31:0] $end
$var wire 1 ! ack $end
$var reg 32 0 a1 [31:0] $end
$var reg 32 1 a2 [31:0] $end
$var reg 32 2 a3 [31:0] $end
$var reg 24 3 ack_cnt [23:0] $end
$var reg 32 4 b1 [31:0] $end
$var reg 32 5 b2 [31:0] $end
$var reg 32 6 b3 [31:0] $end
$var reg 3 7 en_ab [2:0] $end
$var reg 6 8 i [5:0] $end
$scope module dut1 $end
$var wire 32 9 a1 [31:0] $end
$var wire 32 : a2 [31:0] $end
$var wire 32 ; a3 [31:0] $end
$var wire 32 < b1 [31:0] $end
$var wire 32 = b2 [31:0] $end
$var wire 32 > b3 [31:0] $end
$var wire 1 " clk $end
$var wire 1 $ rst $end
$var wire 32 ? c9 [31:0] $end
$var wire 32 @ c8 [31:0] $end
$var wire 32 A c7 [31:0] $end
$var wire 32 B c6 [31:0] $end
$var wire 32 C c5 [31:0] $end
$var wire 32 D c4 [31:0] $end
$var wire 32 E c3 [31:0] $end
$var wire 32 F c2 [31:0] $end
$var wire 32 G c1 [31:0] $end
$var wire 32 H b69 [31:0] $end
$var wire 32 I b58 [31:0] $end
$var wire 32 J b47 [31:0] $end
$var wire 32 K b36 [31:0] $end
$var wire 32 L b25 [31:0] $end
$var wire 32 M b14 [31:0] $end
$var wire 32 N a89 [31:0] $end
$var wire 32 O a78 [31:0] $end
$var wire 32 P a56 [31:0] $end
$var wire 32 Q a45 [31:0] $end
$var wire 32 R a23 [31:0] $end
$var wire 32 S a12 [31:0] $end
$scope module dut_mac1 $end
$var wire 1 " clk $end
$var wire 32 T in_a [31:0] $end
$var wire 32 U in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 V out_c [31:0] $end
$var reg 32 W out_a [31:0] $end
$var reg 32 X out_b [31:0] $end
$var reg 64 Y out_c_r [63:0] $end
$upscope $end
$scope module dut_mac2 $end
$var wire 1 " clk $end
$var wire 32 Z in_a [31:0] $end
$var wire 32 [ in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 \ out_c [31:0] $end
$var reg 32 ] out_a [31:0] $end
$var reg 32 ^ out_b [31:0] $end
$var reg 64 _ out_c_r [63:0] $end
$upscope $end
$scope module dut_mac3 $end
$var wire 1 " clk $end
$var wire 32 ` in_a [31:0] $end
$var wire 32 a in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 b out_c [31:0] $end
$var reg 32 c out_a [31:0] $end
$var reg 32 d out_b [31:0] $end
$var reg 64 e out_c_r [63:0] $end
$upscope $end
$scope module dut_mac4 $end
$var wire 1 " clk $end
$var wire 32 f in_a [31:0] $end
$var wire 32 g in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 h out_c [31:0] $end
$var reg 32 i out_a [31:0] $end
$var reg 32 j out_b [31:0] $end
$var reg 64 k out_c_r [63:0] $end
$upscope $end
$scope module dut_mac5 $end
$var wire 1 " clk $end
$var wire 32 l in_a [31:0] $end
$var wire 32 m in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 n out_c [31:0] $end
$var reg 32 o out_a [31:0] $end
$var reg 32 p out_b [31:0] $end
$var reg 64 q out_c_r [63:0] $end
$upscope $end
$scope module dut_mac6 $end
$var wire 1 " clk $end
$var wire 32 r in_a [31:0] $end
$var wire 32 s in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 t out_c [31:0] $end
$var reg 32 u out_a [31:0] $end
$var reg 32 v out_b [31:0] $end
$var reg 64 w out_c_r [63:0] $end
$upscope $end
$scope module dut_mac7 $end
$var wire 1 " clk $end
$var wire 32 x in_a [31:0] $end
$var wire 32 y in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 z out_c [31:0] $end
$var reg 32 { out_a [31:0] $end
$var reg 32 | out_b [31:0] $end
$var reg 64 } out_c_r [63:0] $end
$upscope $end
$scope module dut_mac8 $end
$var wire 1 " clk $end
$var wire 32 ~ in_a [31:0] $end
$var wire 32 !" in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 "" out_c [31:0] $end
$var reg 32 #" out_a [31:0] $end
$var reg 32 $" out_b [31:0] $end
$var reg 64 %" out_c_r [63:0] $end
$upscope $end
$scope module dut_mac9 $end
$var wire 1 " clk $end
$var wire 32 &" in_a [31:0] $end
$var wire 32 '" in_b [31:0] $end
$var wire 1 $ rst $end
$var wire 32 (" out_c [31:0] $end
$var reg 32 )" out_a [31:0] $end
$var reg 32 *" out_b [31:0] $end
$var reg 64 +" out_c_r [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
bz &
bz %
1$
0#
1"
0!
$end
#50
0"
0$
1#
#100
b1 7
b1 8
1"
#150
0"
#200
b11 7
b10 8
b1 4
b1 <
b1 U
b1 0
b1 9
b1 T
1"
#250
0"
#300
b1 /
b1 G
b1 V
b111 7
b11 8
b10 5
b10 =
b10 [
b100 1
b100 :
b100 f
b100 4
b100 <
b100 U
b10 0
b10 9
b10 T
b1 Y
b1 M
b1 X
b1 g
b1 S
b1 W
b1 Z
1"
#350
0"
#400
b1001 /
b1001 G
b1001 V
b10 .
b10 F
b10 \
b100 ,
b100 D
b100 h
b1001 Y
b100 M
b100 X
b100 g
b10 S
b10 W
b10 Z
b10 _
b10 L
b10 ^
b10 m
b1 R
b1 ]
b1 `
b100 k
b1 J
b1 j
b1 y
b100 Q
b100 i
b100 l
b110 7
b100 8
b11 6
b11 >
b11 a
b111 2
b111 ;
b111 x
b101 5
b101 =
b101 [
b101 1
b101 :
b101 f
b111 4
b111 <
b111 U
b11 0
b11 9
b11 T
1"
#450
0"
#500
b111 )
b111 A
b111 z
b1000 +
b1000 C
b1000 n
b11000 ,
b11000 D
b11000 h
b11 -
b11 E
b11 b
b1100 .
b1100 F
b1100 \
b11110 /
b11110 G
b11110 V
b100 7
b101 8
b110 6
b110 >
b110 a
b1000 2
b1000 ;
b1000 x
b1000 5
b1000 =
b1000 [
b110 1
b110 :
b110 f
b0 4
b0 <
b0 U
b0 0
b0 9
b0 T
b111 }
b1 |
b111 O
b111 {
b111 ~
b1000 q
b10 I
b10 p
b10 !"
b100 P
b100 o
b100 r
b11000 k
b100 J
b100 j
b100 y
b101 Q
b101 i
b101 l
b11 e
b11 K
b11 d
b11 s
b1 c
b1100 _
b101 L
b101 ^
b101 m
b10 R
b10 ]
b10 `
b11110 Y
b111 M
b111 X
b111 g
b11 S
b11 W
b11 Z
1"
#550
0"
#600
b100100 .
b100100 F
b100100 \
b1111 -
b1111 E
b1111 b
b1000010 ,
b1000010 D
b1000010 h
b100001 +
b100001 C
b100001 n
b1100 *
b1100 B
b1100 t
b100111 )
b100111 A
b100111 z
b1110 (
b1110 @
b1110 ""
b0 M
b0 X
b0 g
b0 S
b0 W
b0 Z
b100100 _
b1000 L
b1000 ^
b1000 m
b11 R
b11 ]
b11 `
b1111 e
b110 K
b110 d
b110 s
b10 c
b1000010 k
b111 J
b111 j
b111 y
b110 Q
b110 i
b110 l
b100001 q
b101 I
b101 p
b101 !"
b101 P
b101 o
b101 r
b1100 w
b11 H
b11 v
b11 '"
b100 u
b100111 }
b100 |
b1000 O
b1000 {
b1000 ~
b1110 %"
b10 $"
b111 N
b111 #"
b111 &"
b0 7
b110 8
b1001 6
b1001 >
b1001 a
b1001 2
b1001 ;
b1001 x
b0 5
b0 =
b0 [
b0 1
b0 :
b0 f
1"
#650
0"
#700
b10101 '
b10101 ?
b10101 ("
b110110 (
b110110 @
b110110 ""
b1100110 )
b1100110 A
b1100110 z
b101010 *
b101010 B
b101010 t
b1010001 +
b1010001 C
b1010001 n
b101010 -
b101010 E
b101010 b
b111 8
b0 6
b0 >
b0 a
b0 2
b0 ;
b0 x
b10101 +"
b11 *"
b111 )"
b110110 %"
b101 $"
b1000 N
b1000 #"
b1000 &"
b1100110 }
b111 |
b1001 O
b1001 {
b1001 ~
b101010 w
b110 H
b110 v
b110 '"
b101 u
b1010001 q
b1000 I
b1000 p
b1000 !"
b110 P
b110 o
b110 r
b0 J
b0 j
b0 y
b0 Q
b0 i
b0 l
b101010 e
b1001 K
b1001 d
b1001 s
b11 c
b0 L
b0 ^
b0 m
b0 R
b0 ]
b0 `
1"
#750
0"
#800
b1100000 *
b1100000 B
b1100000 t
b1111110 (
b1111110 @
b1111110 ""
b1000101 '
b1000101 ?
b1000101 ("
b0 K
b0 d
b0 s
b0 c
b0 I
b0 p
b0 !"
b0 P
b0 o
b0 r
b1100000 w
b1001 H
b1001 v
b1001 '"
b110 u
b0 |
b0 O
b0 {
b0 ~
b1111110 %"
b1000 $"
b1001 N
b1001 #"
b1001 &"
b1000101 +"
b110 *"
b1000 )"
b1000 8
b1 3
1"
#850
0"
#900
b10010110 '
b10010110 ?
b10010110 ("
b1001 8
b10 3
b10010110 +"
b1001 *"
b1001 )"
b0 $"
b0 N
b0 #"
b0 &"
b0 H
b0 v
b0 '"
b0 u
1"
#950
0"
#1000
1!
b0 *"
b0 )"
b1010 8
b11 3
1"
#1050
0"
#1100
0!
b1011 8
b100 3
1"
#1150
0"
#1200
b1100 8
b101 3
1"
